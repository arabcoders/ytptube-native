name: Build Native Binaries

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: "Tag to build from main repo"

env:
  PYTHON_VERSION: 3.11
  PNPM_VERSION: 10
  NODE_VERSION: 20

jobs:
  build:
    permissions:
      packages: write
      contents: write
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          repository: arabcoders/ytptube
          ref: ${{ github.event.inputs.tag }}

      - name: Cache Chocolatey packages
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\chocolatey\lib
          key: choco-${{ runner.os }}-qt6
          restore-keys: |
            choco-${{ runner.os }}-

      - name: Install Qt (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install -y qt6-base-dev

      - name: Cache Python venv
        id: cache-python
        uses: actions/cache@v4
        with:
          path: .venv
          key: uv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: "x64"

      - name: Install Python dependencies
        run: |
          pip install uv pipenv
          uv venv
          uv pip compile --all-extras --no-strip-extras --output requirements.txt
          pipenv --rm || true
          pipenv install --python 3.11
          pipenv install -r requirements.txt

      - name: Install PyInstaller + Qt backend (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pipenv run pip install pyinstaller pywebview QtPy PySide6 uv

      - name: Install PyInstaller + Qt backend (Other OSs)
        if: matrix.os != 'windows-latest'
        run: |
          pipenv run pip install pyinstaller pywebview[qt]

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm
          cache-dependency-path: "ui/pnpm-lock.yaml"

      - name: Build frontend
        working-directory: ui
        run: |
          pnpm install --production --prefer-offline --frozen-lockfile
          pnpm run generate

      - name: Build native binary
        run: |
          pipenv run pyinstaller ./app.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}-${{ github.event.inputs.tag }}
          path: dist/*
